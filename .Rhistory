#normalize ratio by general gain or loss of signal
withRatio$ratio = withRatio$ratio/colMeans(withRatio["ratio"])
cpts=cpt.meanvar(as.numeric(unlist(withRatio %>% dplyr::select(ratio))),penalty = "AIC",method = "PELT",minseglen = 2) # can change to 3  for fewer bits
cpt_list<-data.frame(end=cpts@cpts, start=lag(cpts@cpts,default=0)+1,mean=cpts@param.est$mean) %>% filter(mean>1.5 | mean<0.5) %>% mutate(chrom=curChrom)
#append start and end based on loc
cpt_list$end=withRatio$segment[cpt_list$end]
cpt_list$start=withRatio$segment[cpt_list$start]
allCpts=append(allCpts,list(cpt_list))
}
}
#? adjust and normalize?
all_roi<-bind_rows(allCpts)
#iterate through regions
allVals=list()
for (j in 1:nrow(all_roi))
{
curStart=all_roi$start[j]
curEnd=all_roi$end[j]
cellSubset=scData_k_norm %>% filter(chrom==all_roi$chrom[j])
locStart=which(cellSubset$pos==curStart)
locEnd=which(cellSubset$pos==curEnd)
cellSubset=cellSubset[locStart:locEnd,]
merged_by_cluster<-inner_join(rownames_to_column(data.frame(mean=colMeans(cellSubset %>% dplyr::select(ends_with("-1")))),var="barcode"),
rownames_to_column(data.frame(cluster=nmf_results$cellAssigns),var="barcode"))
merged_by_cluster<-merged_by_cluster %>% mutate(neoplastic=(cluster!=nmf_results$clusterNormal)) %>%  mutate(cluster=factor(cluster),neoplastic=factor(neoplastic))
merged_by_cluster %>% group_by(neoplastic) %>% summarise(mean=median(mean),counts=n())
#can  we feed residuals into  the decomposition?
#estimated ratio
testdata=(merged_by_cluster %>% dplyr::select(-barcode,-neoplastic))
discrims<-lda(cluster~.,data=testdata)
preds = discrims %>% predict(testdata)
preds$class
estimated_losses=bind_cols(left_join(data.frame(cluster=preds$class),
rownames_to_column(data.frame(discrims$means),var="cluster")) %>% mutate(mean=mean/discrims$means[nmf_results$clusterNormal]),barcode=merged_by_cluster$barcode) %>% mutate(alteration=j)
allVals=append(allVals,list(estimated_losses))
}
#if range less than 0.4 remove column
valsTable=bind_rows(allVals)
alterationsTable=valsTable %>% dplyr::select(mean,barcode,alteration) # %>% spread(value=mean,key=barcode)
#name alterations
all_roi<-all_roi %>% mutate(name=sprintf("%s:%s-%s",chrom,start,end),alteration=row_number())
final_alterations<-left_join(alterationsTable,all_roi %>% dplyr::select(alteration,name),by="alteration")
final_alterations<-final_alterations %>% dplyr::select(barcode, mean,name) %>% spread(key=name,value=mean)
all_ranges<-apply(final_alterations %>% dplyr::select(-barcode),2,max)-apply(final_alterations %>% dplyr::select(-barcode),2,min)
rangeThreshold=0.4
which(all_ranges>rangeThreshold)
final_alterations<-final_alterations[c("barcode",names(which(all_ranges>rangeThreshold)))]
#then remove ones with max of one group < X (e.g.  50)
minCutoff=50
clean_list=unlist(final_alterations %>% gather("alteration","value",starts_with("chr")) %>% group_by(alteration,value) %>% summarise(min=n()) %>% arrange(alteration,min) %>% slice_head(n=1) %>% filter(min>minCutoff) %>% dplyr::select(alteration))
clean_list<-as.vector(clean_list)
final_alterations<-final_alterations %>% dplyr::select(c("barcode",clean_list))
final_alterations
write.table(file="~/p6d-chr_all-test.csv",x=final_alterations,quote=FALSE,sep=",",row.names=FALSE,col.names=TRUE)
load("~/bing_ren_brain/rna_files/brain1rna.Rdata")
gene.activities[1:5,1:5]
colnames(gene.activities)
rownames(gene.activities)
genenames_to_convert<-rownames(gene.activities)
hgnc.check<-checkGeneSymbols(genenames_to_convert)
#rename to suggested symbols
hgnc.check[which(!is.na(hgnc.check$Suggested.Symbol)),]
final_rowlist<-which(!is.na(hgnc.check$Suggested.Symbol))
library(HGNChelper)
getCurrentHumanMap()
#checkGeneSymbols
genenames_to_convert<-rownames(gene.activities)
hgnc.check<-checkGeneSymbols(genenames_to_convert)
#rename to suggested symbols
hgnc.check[which(!is.na(hgnc.check$Suggested.Symbol)),]
final_rowlist<-which(!is.na(hgnc.check$Suggested.Symbol))
final_rowlist
final_rowlist
gene.activities[final_rowlist,]
gene.activities<-gene.activities[final_rowlist,]
rownames(gene.activities)<-hgnc.check$Suggested.Symbol[final_rowlist]
rnamod_genes<-read.delim("~/sf_peaklists/RNA_modules_may2022.tsv",header=TRUE,sep="\t")
rnamod_genes<-rnamod_genes %>% mutate(Genes=strsplit(Genes,", ")) %>% unnest(Genes)
rnamod_genes<-rnamod_genes %>% transmute(Module=RNAmodule,Gene=Genes)
library(dplyr)
library(tidyr)
library(stringr)
library(Matrix)
library(ggplot2)
library(pheatmap)
rnamod_genes<-read.delim("~/sf_peaklists/RNA_modules_may2022.tsv",header=TRUE,sep="\t")
rnamod_genes<-rnamod_genes %>% mutate(Genes=strsplit(Genes,", ")) %>% unnest(Genes)
rnamod_genes<-rnamod_genes %>% transmute(Module=RNAmodule,Gene=Genes)
read.delim("~/bing_ren_brain/GSE184462_metadata.tsv")
all_meta<-read.delim("~/bing_ren_brain/GSE184462_metadata.tsv")
total_means
module_names=unique(rnamod_genes$Module)
module_averages_by_sample<-data.frame()
#peak_unfiltered %>% filter(Module=="white") %>% select(chrom,start,end)
#USING PRE-NORMED VALUES SO NO CORRECTIONS NEEDED
#pdf("gene_peaks_sf_529_2022.pdf",width=4,height=4)
#rownames(gene.activities)
rawData=data.frame()
rnamod_genes$Gene[which(str_detect(rnamod_genes$Gene,"H2A"))]
celltype_activity$V1[which(str_detect(celltype_activity$V1,"H2A"))]
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% mod_genelist[final_genes]]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
rawData
gene.activities[rownames(gene.activities) %in% mod_genelist[final_genes]])
gene.activities[rownames(gene.activities) %in% mod_genelist[final_genes]]
rownames(gene.activities) %in% mod_genelist[final_genes]]
rownames(gene.activities) %in% mod_genelist[final_genes]
mod_genelist[final_genes]
mod_genelist
final_genes
mod_genelist[final_genes]
mod_genelist
mod_genelist[1:5]
mod_genelist[,1:5]
str(mod_genelist)
rawData=data.frame()
rnamod_genes$Gene[which(str_detect(rnamod_genes$Gene,"H2A"))]
celltype_activity$V1[which(str_detect(celltype_activity$V1,"H2A"))]
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% mod_genelist$Gene[final_genes]]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
total_means
data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% mod_genelist$Gene[final_genes]]),module=mod_name)
gene.activities[rownames(gene.activities) %in% mod_genelist$Gene[final_genes]]
rownames(gene.activities) %in% mod_genelist$Gene[final_genes]
gene.activities[rownames(gene.activities) %in% mod_genelist$Gene[final_genes],]
mod_genelist$Gene[final_genes],]
mod_genelist$Gene[final_genes]
mod_name
unique(mod_genelist$Gene[final_genes])
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% unique(mod_genelist$Gene[final_genes]),]),module=mod_name)
total_means
inner_join
?inner_join
module_names=unique(rnamod_genes$Module)
module_averages_by_sample<-data.frame()
rawData=data.frame()
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% unique(mod_genelist$Gene[final_genes]),]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
library(tibble)
total_means
rownames(total_means)
left_join(data.frame(barcode=rownames(total_means)),all_meta,by="barcode")
all_meta
colnames(all_meta)
left_join(data.frame(cellID=rownames(total_means)),all_meta,by="barcode")
left_join(data.frame(cellID=rownames(total_means)),all_meta,by="cellID")
total_means
all_meta
all_meta %>% dplyr::filter(str_detect(sample,"brain")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
all_meta %>% dplyr::filter(str_detect(sample,"brain")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
all_meta %>% dplyr::filter(str_detect(sample,"cort")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
all_meta %>% dplyr::filter(str_detect(tissue,"brain")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
unique(all_meta$tissue)
all_meta
tail(all_meta)
all_meta<-read.delim("~/bing_ren_brain/GSE184462_metadata.tsv")
tail(all_meta)
unique(all_meta$tissue)
all_meta %>% dplyr::filter(str_detect(tissue,"brain")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
all_meta_clean<-all_meta %>% dplyr::filter(str_detect(tissue,"brain")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
rm(all_meta)
left_join(data.frame(barcode=rownames(total_means)),all_meta_clean,by="barcode")
cell_meta<-left_join(data.frame(barcode=rownames(total_means)),all_meta_clean,by="barcode")
total_means
module_names=unique(rnamod_genes$Module)
module_averages_by_sample<-data.frame()
#peak_unfiltered %>% filter(Module=="white") %>% select(chrom,start,end)
#USING PRE-NORMED VALUES SO NO CORRECTIONS NEEDED
#pdf("gene_peaks_sf_529_2022.pdf",width=4,height=4)
#rownames(gene.activities)
rawData=data.frame()
library(tibble)
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% unique(mod_genelist$Gene[final_genes]),]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
cell_meta<-left_join(data.frame(barcode=rownames(total_means)),all_meta_clean,by="barcode")
module_averages_by_sample = full_join(rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode"),cell_meta,by="barcode") %>% group_by(cell.type) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
module_names=unique(rnamod_genes$Module)
module_averages_by_sample<-data.frame()
#peak_unfiltered %>% filter(Module=="white") %>% select(chrom,start,end)
#USING PRE-NORMED VALUES SO NO CORRECTIONS NEEDED
#pdf("gene_peaks_sf_529_2022.pdf",width=4,height=4)
#rownames(gene.activities)
rawData=data.frame()
library(tibble)
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% unique(mod_genelist$Gene[final_genes]),]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
cell_meta<-left_join(data.frame(barcode=rownames(total_means)),all_meta_clean,by="barcode")
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,full_join(rownames_to_column(total_means,var="barcode"),cell_meta,by="barcode") %>% group_by(cell.type) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
colnames(rawData)<-module_names
rawData[1:5,1:5]
module_averages_by_sample
module_averages_by_sample
pheatmap(module_averages_by_sample,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
module_averages_by_sample
module_averages_by_sample %>% spread(cluster)
module_averages_by_sample %>% spread(cluster)
module_averages_by_sample %>% spread(key="cluster",value="value")
column_to_rownames()module_averages_by_sample %>% spread(key="cluster",value="value"),var="cell.type")
column_to_rownames(module_averages_by_sample %>% spread(key="cluster",value="value"),var="cell.type")
heatmap_stuff<-column_to_rownames(module_averages_by_sample %>% spread(key="cluster",value="value"),var="cell.type")
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
set.seed(42)
random_genes<-sample(1:nrow(gene.activities),size=3000,replace=F)
activityScoreWeights<-colSums(gene.activities[random_genes,])
activityScoreWeights
module_averages_by_sample<-data.frame()
#peak_unfiltered %>% filter(Module=="white") %>% select(chrom,start,end)
#USING PRE-NORMED VALUES SO NO CORRECTIONS NEEDED
#pdf("gene_peaks_sf_529_2022.pdf",width=4,height=4)
#rownames(gene.activities)
rawData=data.frame()
library(tibble)
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% unique(mod_genelist$Gene[final_genes]),]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean / activityScoreWeights
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
cell_meta<-left_join(data.frame(barcode=rownames(total_means)),all_meta_clean,by="barcode")
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,full_join(rownames_to_column(total_means,var="barcode"),cell_meta,by="barcode") %>% group_by(cell.type) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
colnames(rawData)<-module_names
dev.off()
rawData[1:5,1:5]
module_averages_by_sample
heatmap_stuff<-column_to_rownames(module_averages_by_sample %>% spread(key="cluster",value="value"),var="cell.type")
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
write.table(rawData,file="~/bing_ren_brain/adult_rna_modules_all_may2022_1.tsv",col.names=TRUE,quote=FALSE,sep='\t')
write.table(module_averages_by_sample,file="~/bing_ren_brain/adult_rna_modules_celltypes_may2022_1.tsv",col.names=TRUE,quote=FALSE,sep='\t')
dev.off()
dev.off()
pdf("~/bing_ren_brain/sf_rna_module_heatmap.pdf",width=5,height=5)
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
dev.off()
write.table(rawData,file="~/bing_ren_brain/adult_rna_modules_all_may2022_1.tsv",col.names=TRUE,quote=FALSE,sep='\t')
write.table(module_averages_by_sample,file="~/bing_ren_brain/adult_rna_modules_celltypes_may2022_1.tsv",col.names=TRUE,quote=FALSE,sep='\t')
load("~/bing_ren_brain/rna_files/brain2rna.Rdata")
#metadata
all_meta<-read.delim("~/bing_ren_brain/GSE184462_metadata.tsv")
tail(all_meta)
unique(all_meta$tissue)
all_meta_clean<-all_meta %>% dplyr::filter(str_detect(tissue,"brain")) %>% mutate(barcode=str_match(cellID,'[ACTG]+$'))
rm(all_meta)
gene.activities[1:5,1:5]
rownames(gene.activities)
library(HGNChelper)
getCurrentHumanMap()
#checkGeneSymbols
genenames_to_convert<-rownames(gene.activities)
hgnc.check<-checkGeneSymbols(genenames_to_convert)
#rename to suggested symbols
hgnc.check[which(!is.na(hgnc.check$Suggested.Symbol)),]
final_rowlist<-which(!is.na(hgnc.check$Suggested.Symbol))
gene.activities<-gene.activities[final_rowlist,]
rownames(gene.activities)<-hgnc.check$Suggested.Symbol[final_rowlist]
set.seed(42)
random_genes<-sample(1:nrow(gene.activities),size=3000,replace=F)
activityScoreWeights<-colSums(gene.activities[random_genes,])
#gene.activities<-gene.activities/
#normalie  values
#RUN THROUGH MODULES
module_names=unique(rnamod_genes$Module)
module_averages_by_sample<-data.frame()
#peak_unfiltered %>% filter(Module=="white") %>% select(chrom,start,end)
#USING PRE-NORMED VALUES SO NO CORRECTIONS NEEDED
#pdf("gene_peaks_sf_529_2022.pdf",width=4,height=4)
#rownames(gene.activities)
rawData=data.frame()
library(tibble)
for (mod_name in module_names)
{
mod_genelist<-rnamod_genes %>% dplyr::filter(Module==mod_name) %>% dplyr::select(Gene)
final_genes<-which(mod_genelist$Gene %in% rownames(gene.activities))
if(length(final_genes)>0)
{
total_means<-data.frame(mean=colMeans(gene.activities[rownames(gene.activities) %in% unique(mod_genelist$Gene[final_genes]),]),module=mod_name)
#apply gene weight normalization
total_means$mean<-total_means$mean / activityScoreWeights
if (ncol(rawData)>0)
{
rawData = bind_cols(rawData,total_means %>% dplyr::select(-module))
}
else
{
rawData = total_means %>% dplyr::select(-module)
}
cell_meta<-left_join(data.frame(barcode=rownames(total_means)),all_meta_clean,by="barcode")
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,full_join(rownames_to_column(total_means,var="barcode"),cell_meta,by="barcode") %>% group_by(cell.type) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
#combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
colnames(rawData)<-module_names
dev.off()
rawData[1:5,1:5]
module_averages_by_sample
heatmap_stuff<-column_to_rownames(module_averages_by_sample %>% spread(key="cluster",value="value"),var="cell.type")
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
write.table(rawData,file="~/bing_ren_brain/adult_rna_modules_all_may2022_2.tsv",col.names=TRUE,quote=FALSE,sep='\t')
write.table(module_averages_by_sample,file="~/bing_ren_brain/adult_rna_modules_celltypes_may2022_2.tsv",col.names=TRUE,quote=FALSE,sep='\t')
pdf("~/bing_ren_brain/sf_rna_module_adult_brain_heatmap_brain2.pdf",width=5,height=5)
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
dev.off()
dev.off()
pdf("~/bing_ren_brain/sf_rna_module_adult_brain_heatmap_brain2.pdf",width=5,height=5)
pheatmap(heatmap_stuff,scale="column",cluster_cols = TRUE,clustering_method = "ward.D",show_rownames = TRUE,show_colnames=TRUE)
dev.off()
read.delim(file="~/pasca_brain/GSE162170_atac_cell_metadata.txt",header=TRUE)
library(GenomicRanges)
library(data.table)
library(Signac)
library(Seurat)
library(tibble)
test1<-fread("~/Downloads/GSE141460_EPN_count_matrix_TPM.txt")
#load("~/ep_seurat_object.Rdata")
test1<-column_to_rownames(test1,var="V1")
library(stringr)
t1<-str_match(rownames(test1),"H3[A-Z-0-9]+")
t1[!is.na(t1)]
?CreateSeuratObject
#rm(atac_file)
test2<-CreateSeuratObject(test1,"epe")
test1
test2<-ScaleData(test2)
#need the genes of interest
test2<-FindVariableFeatures(test2, selection.method = "vst")
#test2<-CellCycleScoring(test2)
test2 <- RunPCA(test2, features = VariableFeatures(test2), ndims.print = 6:10, nfeatures.print = 10)
test2 <- RunTSNE(test2,perplexity=50,dims=2:10)
FeaturePlot(test2, features=c("CTNNA3","CTNND2","LMNA","LAMA2"),min="q5",max="q95",order=TRUE)
pdf("~/filbin_gojo_ctn.pdf",width=5,height=5)
FeaturePlot(test2, features=c("CTNNA3","CTNND2","LMNA","LAMA2"),min="q5",max="q95",order=TRUE)
dev.off()
FeaturePlot(test2, features=c("CTNNA3","CTNND1"),min="q5",max="q95",order=TRUE)
FeaturePlot(test2, features=c("CTNNA3","CTNND1","MUC1"),min="q5",max="q95",order=TRUE)
FeaturePlot(test2, features=c("CTNNA3","CTNND1","MUC1","PDPN"),min="q5",max="q95",order=TRUE)
FeaturePlot(test2, features=c("CTNNA3","CTNND2","LMNA","LAMA2"),min="q5",max="q95",order=TRUE)
library(CopyscAT)
library(MASS)
sessionInfo()
library("roxygen2")
library("devtools")
setwd("~/scATAC_CNV_TOOL")
devtools::document()
setwd("~/scATAC_CNV_TOOL")
devtools::document()
setwd("~/scATAC_CNV_TOOL")
devtools::document()
setwd("~/scATAC_CNV_TOOL")
devtools::document()
setwd("~/scATAC_CNV_TOOL")
devtools::document()
setwd("~/scATAC_CNV_TOOL")
devtools::document()
setwd("~/scATAC_CNV_TOOL")
devtools::document()
install("~/scATAC_CNV_TOOL")
library(CopyscAT)
initialiseEnvironment(genomeFile="~/hg38_chrom_sizes.tsv",
cytobandFile="~/hg38_1e+06_cytoband_densities_granges.tsv",
cpgFile="~/hg38_1e+06_cpg_densities.tsv",
binSize=1e6,
minFrags=1e4,
cellSuffix=c("-1","-2"),
lowerTrim=0.5,
upperTrim=0.8)
#for this tutorial we will use the sample data included in scData
#to create your own use the process_fragment_file.py script included in the package and run it on a fragments.tsv.gz file of your choosing
#SET OUTPUT DEFAULT DIRECTORY AND NAME
setOutputFile("~","samp_dataset")
#PART 1: INITIAL DATA NORMALIZATION
#step 1 normalize the matrix
#USING SAMPLE DATA FROM PACKAGE
#option: if using your own file replace below with the following
#scData<-readInputTable("myInputFile.tsv")
scData<-scDataSamp
scData_k_norm <- normalizeMatrixN(scData,logNorm = FALSE,maxZero=2000,imputeZeros = FALSE,blacklistProp = 0.8,blacklistCutoff=125,dividingFactor=1,upperFilterQuantile = 0.95)
#when using your own data, please make sure you don't have any excess / alt chromosomes
#collapse into chromosome arm level
summaryFunction<-cutAverage
scData_collapse<-collapseChrom3N(scData_k_norm,summaryFunction=summaryFunction,binExpand = 1,minimumChromValue = 100,logTrans = FALSE,tssEnrich = 1,logBase=2,minCPG=300,powVal=0.73)
#apply additional filters
scData_collapse<-filterCells(scData_collapse,minimumSegments = 40,minDensity = 0.1)
nmf_results<-identifyNonNeoplastic(scData_collapse,methodHclust="ward.D",cutHeight = 0.4)
#?identifyNonNeoplastic
write.table(x=rownames_to_column(data.frame(nmf_results$cellAssigns),var="Barcode"),file=str_c(scCNVCaller$locPrefix,scCNVCaller$outPrefix,"_nmf_clusters.csv"),quote=FALSE,row.names = FALSE,sep=",")
print(paste("Normal cluster is: ",nmf_results$clusterNormal))
altered_segments<-getAlteredSegments(scData_k_norm,nmf_results,lossThreshold = 0.6)
altered_segments
library("roxygen2")
setwd("~/scATAC_CNV_TOOL")
devtools::document()
