combined@assays$peaks@data[subjectHits(overlapList),]
subjectHits(overlapList)
length(subjectHits(overlapList))
combined@assays$peaks@data[subjectHits(overlapList),]
rowSums(data.frame(combined@assays$peaks@data[subjectHits(overlapList),]))
rowSums(data.frame(combined@assays$peaks@data[subjectHits(overlapList),]))
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names[1:82])
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.9) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
dev.off()
dev.ff()
dev.off()
mod_peaklist
mod_name
peak_unfiltered
mod_peaklist
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names[1:82])
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.9) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
if (nrow(mod_peaklist)>0)
{
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
}
dev.off()
print(mod_peaklist)
mod_name
module_names
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names)
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.9) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
print(mod_peaklist)
if (nrow(mod_peaklist)>0)
{
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
}
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names)
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.9) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
print(mod_peaklist)
if (nrow(mod_peaklist)>0)
{
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
#print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
}
dev.off()
module_coverage<-module_coverage %>% arrange(desc(Coverage))
module_coverage$Module=factor(module_coverage$Module,levels=module_coverage$Module)
pdf("~/peak_module_coverage_qc.pdf",width=4,height=9)
ggplot(module_coverage,aes(Module,Coverage)) + geom_col() + coord_flip()
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names)
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.9) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
print(mod_peaklist)
if (nrow(mod_peaklist)>0)
{
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
}
dev.off()
module_averages_by_sample
pheatmap(column_to_rownames(module_averages_by_sample %>% spread(samp,value),var="cluster"),scale="row",clustering_method = "ward.D")
dev.off()
pdf("~/P521_mod_avgs_by_samp.pdf",width=4,height=5)
pheatmap(column_to_rownames(module_averages_by_sample %>% spread(samp,value),var="cluster"),scale="row",clustering_method = "ward.D")
dev.off()
#compute ldistance
library(fastcluster)
library(parallelDist)
#cross correlation plot
scaled_module_scores<-scale(combined@meta.data[,module_names],center = TRUE,scale=TRUE)
per_module_pearson<-cor(as.matrix(scaled_module_scores),method = "pearson")
per_module_pearson[is.na(per_module_pearson)]<-0
pdf("~/sf_samples/peak_correlation_heatmap_new.pdf",width=8,height=8)
pheatmap(per_module_pearson,scale = "none",clustering_method = "ward.D",border_color = NA,fontsize = 8)
dev.off()
per_module_pearson<-cov(as.matrix(scaled_module_scores))
per_module_pearson[is.na(per_module_pearson)]<-0
pdf("~/sf_samples/peak_covariance_heatmap_new.pdf",width=8,height=8)
pheatmap(per_module_pearson,scale = "none",clustering_method = "ward.D",border_color = NA,fontsize = 8)
dev.off()
module_names
scaled_module_scores<-scale(combined@meta.data[,module_names],center = TRUE,scale=TRUE)
module_averages_by_sample$cluster
scaled_module_scores<-scale(combined@meta.data[,unique(module_averages_by_sample$cluster)],center = TRUE,scale=TRUE)
per_module_pearson<-cor(as.matrix(scaled_module_scores),method = "pearson")
per_module_pearson[is.na(per_module_pearson)]<-0
pdf("~/sf_samples/peak_correlation_heatmap_new.pdf",width=8,height=8)
pheatmap(per_module_pearson,scale = "none",clustering_method = "ward.D",border_color = NA,fontsize = 8)
dev.off()
per_module_pearson<-cov(as.matrix(scaled_module_scores))
per_module_pearson[is.na(per_module_pearson)]<-0
pdf("~/sf_samples/peak_covariance_heatmap_new.pdf",width=8,height=8)
pheatmap(per_module_pearson,scale = "none",clustering_method = "ward.D",border_color = NA,fontsize = 8)
dev.off()
scaled_module_scores
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names)
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.8) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
print(mod_peaklist)
if (nrow(mod_peaklist)>0)
{
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
}
dev.off()
pdf("~/sf_module_occupancy_scatac_peaks_300_norm_rands_new.pdf",width=5,height=5)
module_averages_by_sample<-data.frame()
module_coverage<-data.frame()
for (mod_name in module_names)
{
summaryCoverage=0
#list for genome ranges; cor was 0.9
mod_peaklist<-head(peak_unfiltered %>% filter(Module==mod_name) %>% filter(Correlation>0.9) %>% mutate(Weight=-1*log(FDR)*Signal) %>% arrange(desc(Weight)),n=num_peaks) %>% select(chrom,start,end)
print(mod_peaklist)
if (nrow(mod_peaklist)>0)
{
mod_grange<-GRanges(mod_peaklist)
#find overlaps between this and the peaklist
overlapList<-findOverlaps(mod_grange,combined@assays$peaks@ranges,type="any",select="all",ignore.strand=TRUE)
#identify matching peaks in assay
#ranges: combined@assays$peaks@ranges[subjectHits(overlapList)]
#values
if (length(subjectHits(overlapList))>1)
{
peakStrength<-rowSums(combined@assays$peaks@data[subjectHits(overlapList),])
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=colMeans(combined@assays$peaks@data[refinedPeaks,]),module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
else
{
if (length(subjectHits(overlapList))>0)
{
peakStrength<-combined@assays$peaks@data[subjectHits(overlapList),]
refinedPeaks<-names(which(peakStrength > 100))
summaryCoverage=length(refinedPeaks) / nrow(mod_peaklist)
total_means<-data.frame(mean=combined@assays$peaks@data[subjectHits(overlapList),],module=mod_name)
#weighted version - option 1
#quantil is ^1.7 and sqrt of val
#test_thing=data.frame(weights=weights_merge$mean[1:length(total_means$mean)],vals=total_means$mean)
#OPTION 2: works well
#test_thing=data.frame(weights=combined$nCount_peaks[1:length(total_means$mean)],peaks=combined$nFeature_peaks[1:length(total_means$mean)],vals=total_means$mean)
#test_thing
#model=glm(vals ~ .+weights+peaks,test_thing,family="gaussian")
#OPTION 3: NEW
#total_means$mean<-total_means$mean/(combined$peak_region_fragments[1:length(total_means$mean)])^2
combined<-AddMetaData(combined,total_means %>% dplyr::select(-module),col.name=mod_name)
module_averages_by_sample = rbind.data.frame(module_averages_by_sample,rownames_to_column(total_means,var="barcode") %>% mutate(samp=substr(barcode,1,5)) %>% group_by(samp) %>% summarise(value=mean(mean)) %>% mutate(cluster=mod_name))
module_coverage = rbind.data.frame(module_coverage,data.frame(Module=mod_name,Coverage=summaryCoverage))
combined@meta.data[which(is.na(combined@meta.data[mod_name])),mod_name]<-0
print(FeaturePlot(combined,features = mod_name,order = TRUE,min.cutoff = "q20",max.cutoff = "q99"))
}
}
}
}
dev.off()
module_averages_by_sample
write.table(module_averages_by_sample,file="~/sf_samples/P521_peak_avgs_clean.txt",quote=FALSE,row.names=FALSE,col.names=TRUE,sep="\t")
